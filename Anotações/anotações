        // TRATAMENTO DE DADOS 04/02/2024
        
        // (number + number) - number para adição
        // (number + string) - string para concatenação

        // number - numero real (inteiro ou decimal)
        // parseInt() - converte string para inteiro
        // parseFloat() - converte string para decimal
        // String() - converte número para string
        // .toString() - converte número para string

        // ${} - interpolação de string - template string (crase)

        // .length - propriedade que retorna o tamanho de uma string (caracteres)
        // .toUpperCase() - método que converte string para maiúsculo
        // .toLowerCase() - método que converte string para minúsculo
        // split() - método que divide uma string em partes
        // tofixed() - método que limita o número de casas decimais
        // toLocaleString() - método que formata um número (apennas para números)
        // toLocaleString( {style: 'currency', currency: 'BRL'} ) - método que formata um número para moeda
        // "style" = tipo de formatação "currency" = moeda "currency" = tipo de moeda
        // ------------------------------------------------------------------------------------------------------------

        // OPERADORES 05/02/2024

        // OPERADORES ARITMÉTICOS
        // (+ - * / % **) - adição, subtração, multiplicação, divisão, divisão inteira, potenciação
        // ORDEM DE PRECEDÊNCIA  () -> ** -> */ % -> + - (parênteses, potenciação, multiplicação, divisão, divisão inteira, adição, subtração)
        // QUANDO HÁ OPERADORES COM A MESMA PRECEDÊNCIA, A OPERAÇÃO É EXECUTADA DA ESQUERDA PARA A DIREITA
        // AUTO-ATRIBUIÇÃO QUANDO SOMAMOS OU SUBTRAÍMOS UM VALOR A UMA VARIÁVEL E ATRIBUÍMOS O RESULTADO A MESMA VARIÁVEL
        // OPERADORES DE INCREMENTO E DECREMENTO (++) (--) - incremento e decremento de 1
        // OPERADORES DE ATRIBUIÇÃO (+= -= *= /= %=) - adição, subtração, multiplicação, divisão, divisão inteira
        // OPERADORES RELACIONAIS (< > <= >= == != === !==) - menor, maior, menor ou igual, maior ou igual, igual, diferente, igual em valor e tipo, diferente em valor e tipo
        // NUMA LINHA QUE TENHA OPERADORES ARITMÉTICOS E RELACIONAIS, OS ARITMÉTICOS SÃO EXECUTADOS PRIMEIRO
        // OPERADORES DE IDENTIDADE (=== !==) - igualdade em valor e tipo, diferença em valor e tipo
        // OPERADORES LÓGICOS (&& || !) - e, ou, não
        // ORDEM DE PRECEDÊNCIA DOS OPERADORES LÓGICOS  () -> ! -> && -> || (parênteses, não, e, ou)
        // OPERADOR LÓGICO NÃO (!) - inverte o valor de uma expressão lógica
        // OPERADOR LÓGICO E (&&) - retorna verdadeiro se as duas expressões forem verdadeiras
        // OPERADOR LÓGICO OU (||) - retorna verdadeiro se uma das expressões for verdadeira
        // NUMA LINHA QUE TENHA OPERADORES ARITMÉTICOS, RELACIONAIS E LÓGICOS, A SEQUÊNCIA DE EXECUÇÃO É A SEGUINTE: ARITMÉTICOS -> RELACIONAIS -> LÓGICOS
        // OPERADOR TERNÁRIO (condição ? expressão1 : expressão2) - operador que retorna um valor baseado em uma condição
        // -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

        // DOM 06/02/2024
        
        // DOM - DOCUMENT OBJECT MODEL
        // É UMA INTERFACE QUE PERMITE ACESSAR E MANIPULAR ELEMENTOS HTML
        // É UMA REPRESENTAÇÃO DO HTML QUE PODE SER MANIPULADA PELO JAVASCRIPT
        // DÁ ACESSAR POR MARCAÇÃO, NOME, ID, CLASSE, SELETOR CSS, TAG, ATRIBUTO, ETC
        // PARA ACESSAR UM ELEMENTO ESPECÍFICO DA COLEÇÃO, É NECESSÁRIO ESPECIFICAR O ÍNDICE [0] [1] [2] [3] [4] [5] [6] [7] [8] [9] [10]
        // .innertext - propriedade que retorna o texto de um elemento
        // .innerHTML - propriedade que retorna o conteúdo HTML de um elemento
        // getElementByTagName() - retorna uma coleção de elementos com o nome da tag
        // getElementById() - retorna um elemento com o ID especificado
        // getElementsByNames() - retorna uma coleção de elementos com o nome especificado
        // getElementsByClassName() - retorna uma coleção de elementos com a classe especificada
        // querySelector() - retorna o primeiro elemento que corresponde a um seletor CSS
        // (nome da variavel).innerText = "texto" - altera o texto de um elemento
        // EVENTOS - AÇÕES QUE OCORREM EM RESPOSTA A ALGO
        // EVENTOS DE MOUSE (click, mouseover, mouseout, mousedown, mouseup, mousemove)
        // EVENTOS DE TECLADO (keydown, keyup, keypress)
        // addEventListener() - método que anexa um manipulador de eventos a um elemento no javascript
        // -------------------------------------------------------------------------------------------------------------------------------------

        // CONDIÇÕES 07/02/2024

        // CONDIÇÕES - ESTRUTURAS DE CONTROLE QUE PERMITEM DECIDIR O FLUXO DE UM PROGRAMA
        // IF - SE
        // ELSE - SENÃO

        // CONDIÇÕES 10/02/2024

        // CONDIÇÕES ANINHADAS ocorrem quando um if ou else contém outro if, permitindo decisões mais detalhadas e hierárquicas.
        // ELSE IF é usado para verificar múltiplas condições sequenciais dentro de uma estrutura condicional.
        // CONDIÇÂO MULTIPLAS
        // O switch é uma estrutura condicional que avalia uma expressão e executa diferentes blocos de código com base em casos (case). 
        // Se nenhum case corresponder, a opção default é executada.
        // Cada case precisa de um break para evitar a execução dos próximos blocos.
        // O break é usado dentro de um switch para interromper a execução após um case ser satisfeito. Sem ele, os próximos casos serão executados em efeito de "queda"

        // EXERCÍCIOS 12/02

        // QUANDO QUISER QUE SELECIONE UMA OU OUTRA CAIXA TEM QUE COLOCAR O NOME DOS INPUT IGUAIS

        // REPETIÇÕES 13/02

        // O WHILE() é uma estrutura de repetição que executa um bloco de código enquanto uma condição especificada for verdadeira.
        // A repetição do...while executa o bloco de código pelo menos uma vez, e depois repete enquanto a condição for verdadeira.
        // for (let i = 0; i < 10; i++) console.log(i); EXEMPLO

        // VARIAVEIS COMPOSTAS 17/02

        // VARIÁVEIS SIMPLES só conseguem armazenar um valor por vez.
        // VARIÁVEIS COMPOSTAS devem ser capazes de armazenar vários valores em uma mesma estrutura.
        // NEM SEMPRE O ARRAY COMEÇA EM 1, DEPENDENDO DA LINGUAGEM DE PROGRAMAÇÃO COMEÇA EM 0.
        // A VARIAVEL COMPOSTA É UMA ARRAY/VETOR
        // DENTRO DO ARRAY EXISTEM ELEMENTOS QUE AGRUPA O ESPAÇO DA MEMORIA, O VALOR COLOCADO DENTRO DELE E O ÍNDICE
        // INDICE/KEY É O VALOR QUE INDICA O ESPAÇO QUE ESTÁ CADA VALOR COLOCADO DENTRO DO ARRAY.
        // Um ARRAY é uma variável composta que tem vários elementos. Cada elemento é composto por seu valor e por uma chave (key) de identificação.
        // LET declara uma variável que pode ter seu valor alterado depois de inicializada.
        // PARA ADICIONAR MAIS VALORES EM UMA POSIÇÃO ESPECIFICA BASTA "nome da variavel[posição que quer colocar o valor] = valor"
        // PARA COLOCAR UM VALOR POR ULTIMO NAS POSIÇÕES BASTA USAR ".push()" APÓS A VARIAVEL ( EXEMPLO: num.push(7) )
        // PARA SABER O TAMANHO DO ARRAY ATUAL USE ".length" APÓS A VARIAVEL (exemplo num.length)
        // PARA ORDEM NA FORMA CRESCENTE BASTA USAR ".sort()" APÓS A VARIAVEL ( exemplo num.sort() )
        // TEM COMO USAR O FOR DE MANEIRA MAIS SIMPLES PARA OBJETOS E ARRAYS (for in) (exemplo "for(let variavel in variavel) {console.log(num[pos])}")
        // PARA BUSCAR CHAVES USAMOS "variavel.indexOf(valor)"

        // FUNÇÕES 18/02

        // FUNÇÕES são AÇÕES executadas assim que são CHAMADAS ou em decorrência de algum EVENTO.
        // uma FUNÇÃO pode receber PARÂMENTROS e retornar um RESULTADO.
        // TEM COMO COLOCAR PARÂMETROS PRE DEFINIDOS DEPOIS DA VARIEL EM FUNCTION USANDO =
        // VARIAVEIS PODEM TER FUNÇÕES DENTRO DO SEU VALOR (ex: let v = function(n) {})
        // Uma chamada recursiva acontece quando uma função chama a si mesma dentro do seu próprio corpo, repetindo o processo até atingir uma condição de parada.